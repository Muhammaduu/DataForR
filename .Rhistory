f=expression(X^4*5X^2)
f=expression(X^4+5X^2)
f=expression(X^4+5X)
f=expression(X^4+5*X)
d(f)
D(d(f))
D((f))
D(f,"X")
A=D(f,"X")
D(A,"X")
Z=function(X)(X^2+2*X+3)
intergrate(Z,lower=0,upper=5)
integrate(Z,lower=0,upper=5)
integrate(Z)
D(Z,"X")
Z=function(X)(X^2+2*X+3)
max(Z)
f=expression(X^4+5*X)
max(f)
root(f)
data
data()
Z=(swiss)
Z
head(Z,3)
model=lm(Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality)
model
model
model
data()
Z=(swiss)
Z
head(Z,3)
model=lm(Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality,data=Z)
model
summary(model)
k=lm(Fertility~Education+Catholic+Infant.Mortality,data=Z)
k
summary(k)
w=mtcars
q()
x=data(iris)
x
data()
x=iris
iris
x=(iris)
x
z=head(x,10)
z
a=(x$Sepal.Length)
a
barplot(a)
b=(x$Sepal.Width)
b
hist(b)
c=(x$Petal.Length)
c
pie(c)
d=(x$Petal.Width)
d
plot(d)
boxplot(d)
pairs(x[1:5], pch=18)
set.seed(10)
p=sample(2:nrow(iris), 10)
p
summary(aov(a~Species, data =x))
chisq.test(a)
MODEL=lm(a~b,data=x)
MODEL
MOD=lm(a~b+c+d,data=x)
MOD
save.image("C:\\Users\\abdir\\Desktop\\Moha\\rrcat")
q()
x
z
y
y
y
y
t
Rt
x
z
y
x
head(mtcars,6)
z
c
cor.test(z,c,method=c"pearson")
cor.test(z,c,method=c("pearson"))
y=(mtcars$wt)
cor.test(z,c,method=c("pearson"))
w
x
head(mtcars,6)
z
w
cor.test(z,w,method=c("pearson"))
cor(z,w,method=c("pearson")
q()
q()
x
head(x,5)
w
q
q
k
w
y
w
cor.test(w,y,method=c("pearson"))
cor.test(w,y,method=c("pearson"))
w
y
cor.test(w,y,method=c("pearson"))
hist(x$w)
hist(x$sepal.length)
x
plot(x$sepal.length)
pie(x$sepal.length)
x=mtcars
x
pie(x$sepal.length)
pie(x$mpg)
y
plot(mtcars$mpg)
utils:::menuInstallPkgs()
read.csv(file.choose())
x
head(mtcars,5)
summary(mtcars)
y
plot(mtcars$mpg)
plot(mtcars$mpg)
hist(mtcars$wt)
read.csv(choose file())
read.csv(file choose())
read.csv(file.choose())
read.csv(file.choose())
read.csv(file.choose())
w
summary(w)
utils:::menuInstallPkgs()
m
x
y
x
z
cor(z,y,method=c("pearson"))
cor(x,y,method=c("pearson"))
q()
A=read.csv(file.choose())
A
#extracting all predictor variables
all=lm(age~., data=A)
all
#performing forward stepwise regression analysis
forward=step(all,direction="forward", scope=formula(all))
#extracting the first predictor variable
fp=lm(age~1, data=A)
fp
# dealing all variable
allv=lm(age~., data=A)
allv
# performing backward stepwise analaysis
backward=step(fp, direction="backward", scope=formula(allv))
B=read.csv(file.choose())
B
C=(B$census1886)
c
hist(c)
D
D=(B$ssurvey1889)
D
D=B$ssurvey1889)
D=(B$ssurvey1889)
D
D=(B$survey1889)
D
plot(D)
E=(B$avwage)
E
boxplot(E)
cor.test(C,D,E, method=c("spearson"))
cor.test(C,D, method=c("spearson"))
cor.test(C,D, method=c("pearson"))
save.image("C:\\Users\\abdir\\Desktop\\data samples\\exam")
q()
x=read.csv(file.choose())
x=read.csv(file.choose())
install.packages(c("curl", "rmarkdown"))
library("abind", lib.loc="C:/Users/abdir/AppData/Local/R/win-library/4.2")
saf=read.csv(file.choose*())
saf=read.csv(file.choose())
saf=read.csv(file.choose())
saf=read.csv(file.choose())
saf
max.print()
getoption(max.print=10000)
(max.print=10000)
option(max.print=10000)
options(max.print=10000)
options(max.print=10000)
saf=read.csv(file.choose())
saf
A=(saf$Open)
A
B=(bit$Open)
B
B=(bit$Open)
options(max.print=10000)
saf=read.csv(file.choose())
options(max.print=10000)
saf=read.csv(file.choose())
saf
bit=read.csv(file.choose())
bit
ke=read.csv(file.choose())
ke
eth=read.csv(file.choose())
eth
amz=read.csv(file.choose())
amz
app=read.csv(file.choose())
app
A=(saf$Open)
A
B=(bit$Open)
B
C=(ke$Open)
C
D=(eth$Open)
D
E=(amz$Open)
E
F=(app$Open)
F
par(mfrow=c(3,2))
hist(A,main="safaricom")
hist(B,main="bitcoin")
hist(C,main="kshs vs dollar")
hist(D,main="ethereum")
hist(E,main="amazon")
hist(F,main="apple")
hist(A,main="safaricom")
hist(B,main="bitcoin")
hist(C,main="kshs vs dollar")
hist(D,main="ethereum")
hist(E,main="amazon")
hist(F,main="apple")
hist(A,main="safaricom",col="green")
par(mfrow=c(3,2))
hist(A,main="safaricom",col="green")
hist(B,main="bitcoin",col="gold")
hist(C,main="kshs vs dollar",col="brown")
hist(D,main="ethereum")
hist(E,main="amazon",col="blue")
hist(F,main="apple",col="yellow")
par(mfrow=c(3,2))
plot(A,main="safaricom",col="green")
plot(B,main="bitcoin",col="gold")
plot(C,main="kshs vs dollar",col="brown")
plot(D,main="ethereum")
plot(E,main="amazon",col="blue")
plot(F,main="apple",col="yellow")
boxplot(A,main="safaricom",col="green")
boxplot(B,main="bitcoin",col="gold")
boxplot(C,main="kshs vs dollar",col="brown")
boxplot(D,main="ethereum")
boxplot(E,main="amazon",col="blue")
boxplot(F,main="apple",col="yellow")
lag_A=(embed(A,2))
lag_A=(embed(A,2))
plot(lag_A,A[1:(length(A)-1)],pch=20,col="green",xlab="Xt",ylab="X(t+1)")
lag_A=(embed(A,2)[,1])
plot(lag_A,A[1:(length(A)-1)],pch=20,col="green",xlab="Xt",ylab="X(t+1)")
plot(lag_A,A[1:(length(A)-1)],col="green",xlab="Xt",ylab="X(t+1)")
#return plots
lag_A=(embed(A,2)[,1])
plot(lag_A,A[1:(length(A)-1)],col="green",xlab="Xt",ylab="X(t+1)")
lag_B=(embed(B,2)[,1])
plot(lag_B,B[1:(length(B)-1)],col="gold",xlab="Xt",ylab="X(t+1)")
lag_C=(embed(C,2)[,1])
plot(lag_C,C[1:(length(C)-1)],col="brown",xlab="Xt",ylab="X(t+1)")
lag_D=(embed(D,2)[,1])
plot(lag_D,D[1:(length(D)-1)],xlab="Xt",ylab="X(t+1)")
#return plots
lag_A=(embed(A,2)[,1])
plot(lag_A,A[1:(length(A)-1)],col="green",xlab="Xt",ylab="X(t+1)")
lag_B=(embed(B,2)[,1])
plot(lag_B,B[1:(length(B)-1)],col="gold",xlab="Xt",ylab="X(t+1)")
lag_C=(embed(C,2)[,1])
plot(lag_C,C[1:(length(C)-1)],col="brown",xlab="Xt",ylab="X(t+1)")
lag_D=(embed(D,2)[,1])
plot(lag_D,D[1:(length(D)-1)],xlab="Xt",ylab="X(t+1)")
lag_E=(embed(E,2)[,1])
plot(lag_E,E[1:(length(E)-1)],col="blue",xlab="Xt",ylab="X(t+1)")
lag_F=(embed(F,2)[,1])
plot(lag_F,B[1:(length(F)-1)],col="green",xlab="Xt",ylab="X(t+1)")
q()
library(ggplot2)
library(dplyr)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallLocal()
update.packages(ask='graphics',checkBuilt=TRUE)
chooseCRANmirror()
utils:::menuInstallPkgs()
q()
